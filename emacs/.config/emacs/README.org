* essentials
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package emacs
    :custom
    (tool-bar-mode nil)
    (tooltip-mode nil)
    (menu-bar-mode nil)
    (scroll-bar-mode nil)
    (blink-cursor-mode nil)
    (confirm-kill-processes nil)
    (make-backup-files nil)
    (auto-save-default nil)
    (use-dialog-box nil)
    (indent-tabs-mode nil)
    (initial-scratch-message nil)
    (mode-line-format nil)
    (display-time-default-load-average nil)
    (ring-bell-function 'ignore)
    (fringe-mode 0)
    (indicate-buffer-boundaries nil)
    (indicate-empty-lines nil)
    (overflow-newline-into-fringe nil)
    (tab-width 2)
    (word-wrap t)
    (initial-major-mode 'text-mode)
    (standard-indent 2)
    (electric-indent-inhibit t)
    (inhibit-startup-message t)
    (scroll-conservatively 101)
    (use-short-answers t)
    (backward-delete-char-untabify-method 'hungry)
    (tab-always-indent 'complete)
    (text-mode-ispell-word-completion nil)
    (sentence-end-double-space nil)
    (require-final-newline nil)
    (kill-do-not-save-duplicates t)
    (window-resize-pixelwise t)
    (frame-resize-pixelwise t)
    (comment-multi-line t)
    (ispell-dictionary "en_US")
    (large-file-warning-threshold 200000000) ;; warning for 200mb
    ;; perfomance and optimizations
    (gc-cons-threshold (* 128 1024 1024))
    (read-process-output-max (* 1024 1024))
    (process-adaptive-read-buffering nil)
    (load-prefer-newer t)
    ;; vertico
    (enable-recursive-minibuffers t)
    (read-extended-command-predicate #'command-completion-default-include-p)
    (minibuffer-prompt-properties
    '(read-only t cursor-intangible t face minibuffer-prompt))
    ;; corfu
    (tab-always-indent 'complete)
    (text-mode-ispell-word-completion nil)
    (read-extended-command-predicate #'command-completion-default-include-p)
    :config
    (electric-pair-mode)
    (global-prettify-symbols-mode)
    (global-auto-revert-mode)
    (load-theme 'modus-vivendi-tritanopia)
    (add-to-list 'default-frame-alist
                '(font . "DejaVu Sans Mono-10"))
    ;; speed
     (defun start/display-startup-time ()
       (message "Emacs loaded in %s with %d garbage collections."
                 (format "%.2f seconds"
                         (float-time
               (time-subtract after-init-time before-init-time)))
                 gcs-done))
     :hook
     (emacs-startup-hook . start/display-startup-time)
     (before-save-hook . whitespace-cleanup)
     (prog-mode . guix-prettify-mode)
     (dired-mode . guix-prettify-mode)
  )
#+end_src
* dired
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package dired
    :hook
    (dired-mode . hl-line-mode)
    (dired-mode . dired-hide-details-mode)
    (dired-mode . all-the-icons-dired-mode)
    :custom
    (dired-listing-switches "-Alh --group-directories-first")
    (dired-auto-revert-buffer t)
    (dired-free-space nil)
    (dired-kill-when-opening-new-dired-buffer t)
    (dired-recursive-copies  'always)
    (dired-recursive-deletes 'always)
    (shell-command-guess-open "mpv")) ;; used by dired-do-open (emacs-30)
#+end_src
* org
add property headers for mkdirp and tangle
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package org
  :hook
  (org-mode . visual-line-mode)
  :custom
  (org-return-follows-link t)
  (org-ellipsis " â–¼")
  (org-log-done 'time)
  (org-startup-folded 'content)
  (org-agenda-files '("~/alchemy/insanity/"))
  (org-src-fontify-natively t)
  (org-src-preserve-indentation t)
  (org-todo-keywords
        '((sequence "TODO" "TINKER" "ERROR" "TOMORROW" "|" "HORIZON"))))
(use-package org-agenda
  :custom
  (org-agenda-include-diary t))
(use-package org-modern
  :custom
  (org-modern-star nil) ;; icon not being rendered, using superstar for now
  :hook
  (org-mode . org-modern-mode))
(use-package org-superstar
  :custom
  (org-superstar-remove-leading-stars t)
  :hook
  (org-mode . org-superstar-mode))
#+end_src
* quality of life
** minibuffer
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package which-key
    :custom
    (which-key-allow-evil-operators t)
    (which-key-show-operator-state-maps t)
    :init
    (which-key-mode))
  (use-package savehist
    :custom
    (history-delete-duplicates t)
    (history-length 47)
    :init
    (savehist-mode))
#+end_src
** visuals
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package pulsar
  :custom
  (pulsar-face 'pulsar-red)
  (pulsar-highlight-face 'pulsar-red)
  (pulsar-global-mode t))
(use-package all-the-icons
  :if (display-graphic-p))
(use-package all-the-icons-dired
 :if (display-graphic-p))
(use-package rainbow-mode
  :init
  (rainbow-mode))
(use-package emojify
  :hook (after-init . global-emojify-mode))
#+end_src
* essential packages
** gnus
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package gnus
    :hook
    (gnus-group-mode-hook . gnus-topic-mode)
    :custom
    ;; personal info
    (user-full-name "Sunless Kelv")
    (user-mail-address "sunlesskelv@gmail.com")
    ;; No primary server:
    (gnus-select-method '(nnnil ""))
    ;; main news
    (gnus-secondary-select-methods '(
                                     (nnimap "gmail"
                                             (nnimap-address "imap.gmail.com")
                                             (nnimap-server-port 993)
                                             (nnimap-stream ssl))
                                     (nntp "gwene" (nntp-address "news.gwene.org"))
                                     )
    )
    ;; mail locations
    (gnus-directory "~/.config/emacs/news")
    (message-directory "~/.config/emacs/mail")
    (nnfolder-directory "~/.config/emacs/mail/archive")
    ;; random
    (gnus-interactive-exit nil)
    (gnus-asynchronous t)

    ;; sending mail
    (message-send-mail-function 'smtpmail-send-it)
    (smtpmail-default-smtp-server "smtp.gmail.com")
    (smtpmail-smtp-service 587)
  )
#+end_src
** newsticker
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package newsticker
  :custom
  (newsticker-url-list '(
                         ;; emacs
                         ("Planet Emacslife" "https://planet.emacslife.com/atom.xml")
                         ("Mastering Emacs" "http://www.masteringemacs.org/feed/")
                         ("Oremacs" "https://oremacs.com/atom.xml")
                         ("EmacsCast" "https://pinecast.com/feed/emacscast")
                         ("Emacs TIL" "https://emacstil.com/feed.xml")
                         ("Xenodium" "https://xenodium.com/rss")
                         ("lemmy" "https://lemmy.ml/feeds/c/emacs.xml?sort=Active")
                         ("null" "http://nullprogram.com/feed/")
                         ("50ply" "http://www.50ply.com/atom.xml")
                         ("nedroid" "http://nedroid.com/feed/")
                         ("luke smith" "https://lukesmith.xyz/rss.xml")
                         ;; reddit
                         ("emacs" "https://www.reddit.com/r/emacs.rss")
                         ("guix" "https://www.reddit.com/r/guix.rss")
                         ("linux" "https://www.reddit.com/r/linux.rss")
                         ("commandline" "https://www.reddit.com/r/commandline.rss")
                         ("linuxadmin" "https://www.reddit.com/r/linuxadmin.rss")
                         ("sysadmin" "https://www.reddit.com/r/sysadmin.rss")
                         ("coding" "https://www.reddit.com/r/coding.rss")
                         ("programming" "https://www.reddit.com/r/programming.rss")
                         ("learn programming" "https://www.reddit.com/r/learnprogramming.rss")
                         ("compsci" "https://www.reddit.com/r/compsci.rss")
                         ("computer science" "https://www.reddit.com/r/ComputerScience.rss")
                         ("rust" "https://www.reddit.com/r/rust.rss")
                         ;;articles
                         ("tecmint" "https://morss.it/https://www.tecmint.com/feed/")
                         ("itsfoss" "https://morss.it/https://itsfoss.com/rss/")
                         ("hackaday" "https://morss.it/feeds.feedburner.com/hackaday")
                         ("guardian" "https://morss.it/https://www.theguardian.com/uk/technology/rss")
                         ("soydev medium" "https://morss.it/https://medium.com/feed/tag/software-development")
                         ("tech medium" "https://morss.it/https://medium.com/feed/tag/technology")
                         ("hn newest" "https://morss.it/https://hnrss.org/newest")
                         ("hn front" "https://morss.it/https://hnrss.org/frontpage")
                         ("hn best" "https://morss.it/https://hnrss.org/best")
                )))
#+end_src
** proced
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
(use-package proced
  :custom
  (proced-auto-update-flag t)
  (proced-enable-color-flag t))
#+end_src
** spelling
cannot find ispell
#+begin_src emacs-lisp
(use-package flyspell
  :hook
  (text-mode . flyspell-mode)
  (prog-mode . flyspell-prog-mode))
#+end_src
** terminal
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package eshell
    :custom
    (eshell-banner-message "")
    :hook
    (eshell-first-time-mode-hook . #'eat-eshell-visual-command-mode)
    (eshell-first-time-mode-hook . #'eat-eshell-mode))
#+end_src
** pdf
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package pdf-tools
    :custom
    (pdf-view-display-size 'fit-height)
    :hook
    (pdf-tools-enabled . pdf-view-themed-minor-mode)
    :init
    (pdf-tools-install)
    (pdf-loader-install))
  (use-package org-pdf-tools
    :hook (org-mode . org-pdftools-setup-link))
  (use-package saveplace-pdf-view
    :init
    (save-place-mode))
#+end_src
** music
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package emms
    :config
    (require 'emms-player-simple)
    (require 'emms-source-file)
    (require 'emms-source-playlist)
    :init
    (emms-all)
    :custom
    (emms-repeat-playlist t)
    (emms-source-file-default-directory "~/silence")
    ;; (emms-cache-file nil)
    (emms-history-file nil)
    (emms-player-list '(emms-player-mpg321
                        emms-player-ogg123
                        emms-player-mpv)))
#+end_src
** helpful
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package helpful
    :bind (("C-h f" . helpful-callable)
          ("C-h v" . helpful-variable)
          ("C-h k" . helpful-key)
          ("C-h x" . helpful-command)))
#+end_src
** chess
idk why stockfish isn't playing
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package chess
      :custom
      (chess-default-engine #'chess-gnuchess)
      (chess-default-display #'chess-ics1))
#+end_src
** youtube
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package yeetube
    ;; TODO: bindings not working
    ;; :bind
    ;; (:map yeetube-mode-map
    ;;        ("h" . yeetube-search)
    ;;        ("l" . yeetube-play))
    :config
    (setf yeetube-display-thumbnails-p nil)
    (setf yeetube-mpv-video-quality 720)
    (setf yeetube-results-limit 30)
    (setf yeetube-filter "Date"))
#+end_src
* bindings
** evil
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package evil
    :bind
    (:map evil-normal-state-map
          ("TAB" . org-cycle)
          ("RET" . org-return)
          ("g l" . evil-end-of-line)
          ("g h" . evil-beginning-of-visual-line))
    :custom
    (evil-want-integration t)
    (evil-respect-visual-line-mode t)
    (evil-want-keybinding nil)
    (evil-undo-system 'undo-redo)
    (evil-shift-width 2)
    :init
    (evil-mode))

  (use-package evil-collection
    :after evil
    :config
    ;; dired
    (evil-collection-define-key 'normal 'dired-mode-map
      "h" 'dired-up-directory
      "l" 'dired-find-file
      "." 'dired-do-open)
    ;; info
    (evil-collection-define-key 'normal 'Info-mode-map
      "h" 'Info-up
      "l" 'Info-follow-nearest-node)
    ;; elfeed
    (evil-collection-define-key 'normal 'elfeed-search-mode-map
      "u" 'elfeed-update
      "h" 'elfeed-search-quit-window
      "l" 'elfeed-search-show-entry)
    ;; emms
    (evil-collection-define-key 'normal 'emms-playlist-mode-map
      "h" 'emms-shuffle
      "l" 'emms-playlist-mode-play-smart)
    :init
    (evil-collection-init))
#+end_src
** exwm
efficient functions call instead of lambdas
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package exwm
    :hook
    (exwm-update-class-hook . (lambda ()
                                (exwm-workspace-rename-buffer exwm-class-name)))
    :custom
    (browse-url-browser-function 'browse-url-generic)
    (browse-url-generic-program "icecat")
    (exwm-workspace-number 9)
    (exwm-input-global-keys
          `(
            ;; buffer management
            ([?\s-b] . switch-to-buffer)
            ([?\s-i] . delete-window)
            ([?\s-w] . save-some-buffers)
            ([?\s-q] . (lambda () (interactive) (kill-buffer (current-buffer))))
            ([?\s-s] . (lambda () (interactive) (split-window-below) (window-swap-states)))
            ([?\s-v] . (lambda () (interactive) (split-window-right) (window-swap-states)))
            ([?\s-\[] . (lambda ()
                          (interactive)
                          (mapc 'kill-buffer (delq (current-buffer) (buffer-list)))))
            ([?\s-c] . (lambda ()
                          (interactive)
                          (find-file "~/alchemy/dotfiles/emacs/.config/emacs/README.org")))
            ([?\s-r] . (lambda ()
                          (interactive)
                          (org-babel-tangle-file "~/alchemy/dotfiles/emacs/.config/emacs/README.org")
                          (load-file "~/.config/emacs/init.el")))
            ([?\s-x] . (lambda ()
                          (interactive)
                          (find-file "~/alchemy/dotfiles/guix/.config/guix/home.scm")))
            ;; move windows
            ([?\s-l] . windmove-right)
            ([?\s-h] . windmove-left)
            ([?\s-k] . windmove-up)
            ([?\s-j] . windmove-down)
            ([?\s-H] . windmove-swap-states-left)
            ([?\s-L] . windmove-swap-states-right)
            ([?\s-J] . windmove-swap-states-down)
            ([?\s-K] . windmove-swap-states-up)
            ;; misc
            ([?\s-e] . (lambda () (interactive) (eshell 'N)))
            ([?\s-o] . guix-packages-by-name)
            ([?\s-p] . app-launcher-run-app)
            ([?\s-f] . find-file)
            ([?\s-d] . diary)
            ([?\s-a] . org-agenda)
            ([?\s-m] . newsticker-show-news)
            ([?\s-y] . org-store-link)
            ([?\s-t] . org-insert-link)
            ([?\s-/] . comment-line)
            ([?\s-n] . (lambda () (interactive) (dired "~/alchemy/insanity/")))
            ,@(mapcar (lambda (i)
                        `(,(kbd (format "s-%d" i)) .
                          (lambda ()
                            (interactive)
                            (exwm-workspace-switch-create ,i))))
                      (number-sequence 0 9))

           ))
    :bind (
            ;; essential desktop bindings
            ("<XF86AudioRaiseVolume>" . (lambda () (interactive)
                    (start-process "" nil "pactl" "set-sink-volume" "@DEFAULT_SINK@" "+10%")))
            ("<XF86AudioLowerVolume>" . (lambda () (interactive)
                    (start-process "" nil "pactl" "set-sink-volume" "@DEFAULT_SINK@" "-5%")))
            ("<XF86MonBrightnessUp>" . (lambda () (interactive)
                    (start-process "" nil "brightnessctl" "set" "+10%")))
            ("<XF86MonBrightnessDown>" . (lambda () (interactive)
                    (start-process "" nil "brightnessctl" "set" "3%-")))
          )
    :init
    (exwm-wm-mode))
#+end_src
* dev
** basic
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package flymake
    :hook
    (prog-mode . flymake-mode))
  (use-package eldoc
    :hook
    (prog-mode . eldoc-mode))
#+end_src
** auto-complete and minibuffer
#+begin_src emacs-lisp :tangle "~/.config/emacs/init.el" :mkdirp yes
  (use-package vertico
    :init
    (vertico-mode))
  (use-package vertico-posframe
    :custom
    (vertico-posframe-poshandler #'posframe-poshandler-frame-top-center)
    (vertico-posframe-parameters
      '((left-fringe . 0)
        (right-fringe . 0)))
    :init
    (vertico-posframe-mode))
   (use-package marginalia
     :init
     (marginalia-mode))
  (use-package corfu
    :hook
    (prog-mode . corfu-mode)
    (org-mode . corfu-mode)
    (corfu-mode-hook . (lambda ()
                (setq-local completion-styles '(basic)
                            completion-category-overrides nil
                            completion-category-defaults nil)))
    :custom
    (corfu-auto t)
    (corfu-quit-no-match 'separator))
   (use-package dabbrev
     :bind (("M-/" . dabbrev-completion)
           ("C-M-/" . dabbrev-expand))
     :config
     (add-to-list 'dabbrev-ignored-buffer-regexps "\\` ")
     (add-to-list 'dabbrev-ignored-buffer-modes 'authinfo-mode)
     (add-to-list 'dabbrev-ignored-buffer-modes 'doc-view-mode)
     (add-to-list 'dabbrev-ignored-buffer-modes 'pdf-view-mode)
     (add-to-list 'dabbrev-ignored-buffer-modes 'tags-table-mode))
  (use-package cape
    :after corfu
    :init
    (add-hook 'completion-at-point-functions #'cape-dabbrev)
    (add-hook 'completion-at-point-functions #'cape-dict)
    (add-hook 'completion-at-point-functions #'cape-file)
    (add-hook 'completion-at-point-functions #'cape-elisp-block)
    (add-hook 'completion-at-point-functions #'cape-history)
    )
   (use-package orderless :custom
     (completion-styles '(orderless basic))
     (completion-category-overrides '((file (styles partial-completion))))
     (completion-category-defaults nil)
     (completion-pcm-leading-wildcard t))
#+end_src
